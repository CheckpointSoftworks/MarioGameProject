Author of the code review: Ian Weber
Date of the code review: 10/11/15
Sprint number: 3
Name of the .cs file being reviewed: Mario
Author of the .cs file being reviewed: Matt Mohr
Number of minutes taken to complete the review: 15 min 

Description:

This is the main Mario file for our project.  It implements the IPlayer.  For example, it contains whether he is facing left or right, whether he is big or small, and more state information, as well as functions for collision, drawing, and updating mario. We have improved and added a lot to the class since sprint2, such as collision and movement for mario.  One of the first things that pops out about the class is the use of both private and public variables for mario's state.  I'm not sure if this is a design we will keep for the long term, but it is suitable for the purposes of sprint 3 and is still very readable -- it is clear why such a design was chosen.  The next thing which I noticed about the class is that the star int variable is a private int which is manually reduced in the "star" form for mario, this is a bit confusing but again makes context for the class, but it is not reset to be 600 at any point.  So if he picks up another star, I'm not sure how that will work out, but that is a somewhat trivial point we will debug later.  Basically, I'm finding there are no obvious code smells thus far, just perhaps different designs we may wish to choose in the future or small problems which may arise based on the current concrete code.  So overall, the class is still one of our best examples of having low concrete dependency on any other class as well as strong readability and succinctness.  It is not too long, and only necessary code is included.  Not sure what else to add here, I feel like this class is coming along well as far as meeting expectations for sprint3 and the functionality required, without becoming spaghetti code or too disjointed, and perhaps my next code review will be on a different class.  
	