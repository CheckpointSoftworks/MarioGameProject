Author of the code review: Ian Weber
Date of the code review: 11/16/2015
Sprint number: 5
Name of the .cs file being reviewed: Pole.cs
Author of the .cs file being reviewed: Jonathan Miller
Number of minutes taken to complete the review: 10
Detailed description:
The Pole class is simple to read and has low coupling with any other classes. It is meant to be used in conjunction with the PoleSprite class in game to
display mario sliding down the pole at the ending sequence.  He changed the pole from being a part of the background to being a new sprite.  The Pole class
is cohesive in and of itself and has only three methods: a constructor, an update method, and a draw method.  The update method is only coupled with polesprite
because it has to draw it.  It doesn't use any other classes or special variables in any of its core logic so it is not coupled with anything heavily.  This
is a good example of why low coupling is important.  We have various classes that are able to implement the types of objects we see in the game, which are 
designated with interfaces.  We can then use these objects in other code without referencing them directly since we know they will all behave in the same way.  
They are stored in the LevelStorage class in lists which is globally accessible anywhere in game.  