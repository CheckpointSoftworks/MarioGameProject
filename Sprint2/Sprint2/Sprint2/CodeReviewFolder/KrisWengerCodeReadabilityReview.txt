Author of the code review: Kris Wenger
Date of the code review: 10/11/15
Sprint number: 3
Name of the .cs file being reviewed: MarioJumpRun
Author of the .cs file being reviewed: Matt Mohr
Number of minutes taken to complete the review: 10 mins to write all the review, only 3 or 4 to read the code.
Specific comments on what is readable and what is not:
	Most of the naming of the variables are easy to understand what they, stand for and what they should do.
	However, there are some variables like small, big, and fire, which I believe would be better suited to be named
	something smallSprite,bigSprite,fireSprite.  Also when initalizing it may be better to not call the sent mario,
	just mario because the field Mario is called mario, so this could cause confusion, but is cleared up somewhat by
	the fact the class initalization uses this.mario for the field and just mario for the sent mario. The calls to outside 
	classes also are readable because the method names, and class names make sense, such as calling	the 
	AnimatedSprite(MarioSpriteFactory.CreateMarioBigJumpingSprite(), 1, 1, mario.Location);, makes sense what it should do.
	This is true even not knowing what the called methods are, the call itself implies what it should it do. It creates an animated sprite
	from a BigJumpingMario Sprite.  However, I can see it being confusing to becuase of the 1 and 1 sent to the AnimatedSprite.  If someone
	does not know what animatedsprite does with these numbers they mean little to the reader. This could be fixed easily,
	however just adding properties to the intilization class of what these numbers are for. However for the most
	part the MarioJump class makes sense, the Update and Draw methods are straight foward, they decide which sprite to update/draw,
	then they do their respective call to that sprites update/draw.  The other methods which deal with state
	changes to mario are also straightfoward and easily readable being only one or two lines of code. 
	Overall I believe the class' code is very Readable.