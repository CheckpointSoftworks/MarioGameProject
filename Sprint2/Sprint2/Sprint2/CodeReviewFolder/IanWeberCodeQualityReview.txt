Author: Ian Weber
Date: 9/23/15
Sprint number: 2
Name of the .cs file being reviewed: Mario.cs
Author of the .cs file being reviewed: Matthew Mohr
Number of minutes taken to complete the review: 20
Description: Simply enough, this is the Mario class.  We implemented Mario as a GameObject which represents the Mario character in our game.  It contains the
properties that represent the state that mario is currently in, for example isDying, isJumping, etc.  It has a constructor which initializes mario in the 
direction and stance required for sprint2 (small, facing right).  It also has the typical Update and Draw methods, and the methods required for changing mario's 
state.
Code Review:  This code was clear and readable.  Names of variables were well chosen and the class is able to be read with little previous knowledge of how the
 class is supposed to function.  All class methods are sufficiently simple in the sense that they contain 20 or less lines of code.  We can also clearly see that
 it implements an IGameObject since it implements the Update and Draw methods, but also has a few additional methods for changing Marios state (specifically, his
 stance in the game).  These methods include Still, Running, ChangeDirection, Jump, ShootFireball, Duck, and Dying (later on, obviously we will implement
 animation for each of these states, but the important design/architecture of the class seems to be a solid foundation upon which to work with).  The actual
 method logic for each of the state changes is located in a separate file; for example: MarioChangeDirection.cs implements the logic for when Mario should change
 direction, what Mario sprite should be drawn to the screen, etc -- But, this logic is not all packed into the Mario.cs file.  This design allows the implementer
 to choose whether he would like to work on the core game logic, by implementing a PlayerState, or the objects themselves by implementing a GameObject.